// Attach plugins
plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'java-library'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

// Standard Project Information
version = "$project.minecraftVersion-$project.modSpecVer.$project.modImplVer"
group = project.userGroup
archivesBaseName = project.modId

// Sets the toolchain to compile against OpenJDK 16
java.toolchain {
    languageVersion = JavaLanguageVersion.of(17)
    vendor = JvmVendorSpec.ADOPTOPENJDK
}

// Add generated source set and attach to main source set
sourceSets {
    api
    generated
    main{
        java {
            srcDirs += sourceSets.api.java.srcDirs
        }
        resources {
            srcDirs += sourceSets.api.resources.srcDirs
            srcDirs += sourceSets.generated.resources.srcDirs
            exclude '.cache/'
        }
    }
}

def version_properties = [
        "loader_version"    : loaderVersion,
        "license"           : license,
        "issue_tracker_url" : issueTrackerURL,
        "mod_id"            : modId,
        "version"           : modSpecVer,
        "mod_name"          : modName,
        "display_url"       : displayURL,
        "forge_version"     : forgeVersion,
        "mixin_version"     : mixinVersion
]

processResources {
    outputs.upToDateWhen { false }
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    from(sourceSets.main.resources) {
        include "META-INF/mods.toml"
        include "epos.mixins.json"
        expand version_properties
    }
    into "$buildDir/resources/main/"
}

minecraft {
    // The mappings can be changed at any time, and must be in the following format:
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly
    // stable     #          Stables are built at the discretion of the MCP team
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. they may not always work
    // Simply re-run your setup task after changing the mappings to update your workspace
    mappings channel: project.mappingsType, version: project.mappingsVersion

    // Exposes fields, methods, constructors, and classes for use within the mod
    // Set modTransformer to 'true' within gradle.properties to enable
    if (project.hasProperty('modTransformer') && project.getProperty('modTransformer').toBoolean())
        accessTransformer file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations
    // These can be tweaked, removed, or duplicated as needed
    runs {
        // Client run configuration
        client {
            // Directory for the project to run in
            workingDirectory file('run/client')

            // Add mixin configuration argument
            arg '-mixin.config=' + project.modId + '.mixins.json'

            // Set the console logging level
            property 'forge.logging.console.level', 'debug'

            // Attach the sources to the run
            mods.create(project.modId).source(sourceSets.main)
        }

        // Server run configuration
        server {
            workingDirectory file('run/server')
            arg '-mixin.config=' + project.modId + '.mixins.json'
            property 'forge.logging.console.level', 'debug'
            mods.create(project.modId).source(sourceSets.main)
        }


        // Data run configuration
        data {
            workingDirectory file('run/data')
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources
            args '--mod', project.modId,
                '--all',
                '--output', sourceSets.generated.resources.srcDirs[0],
                '--existing', sourceSets.main.resources.srcDirs[0]

            mods.create(project.modId).source(sourceSets.main)
        }
    }
}

configurations {
    library
    apiImplementation.extendsFrom(implementation)
    implementation.extendsFrom library
}

minecraft.runs.all {
    lazyToken('minecraft.classpath') {
        configurations.library.copyRecursive().resolve().collect {
            it.absolutePath
        }.join(File.pathSeparator)
    }
}

repositories {

}

configurations {
    shade
    runtimeMod { transitive = false }
}

dependencies {
    // Include MinecraftForge as a dependency
    minecraft group: 'net.minecraftforge', name: 'forge', version: "$project.minecraftVersion-$project.forgeVersion"
    implementation sourceSets.api.output
    // Include Mixin as a Library
    //library "org.spongepowered.mixin:$project.mixinVersion"
}

test {
    useJUnitPlatform()
}

shadowJar {
    configurations = [project.configurations.shade]
    finalizedBy 'reobfShadowJar'
}

// Set attributes of the jar
jar {
    finalizedBy 'reobfJar'

    // Set manifest information
    // Add mixin to jar manifest
    manifest.attributes([
        'Specification-Title': project.modName,
        'Specification-Vendor': project.userName,
        'Specification-Version': project.modSpecVer,
        'Implementation-Title': project.modName,
        'Implementation-Version': project.version,
        'Implementation-Vendor': project.userName,
        'Implementation-Timestamp': new Date().format('yyyy-MM-dd\'T\'HH:mm:ssZ'),
        'MixinConfigs': "${project.modId}.mixins.json"
    ])
}

// Setup mixin reference map
mixin {
    add sourceSets.main, "${project.modId}.refmap.json"
}

reobf {
    shadowJar {}
}

project.afterEvaluate {
    task copyMods(type:Copy) {
        from configurations.runtimeMod.files
        into file("run/mods")
    }
}
