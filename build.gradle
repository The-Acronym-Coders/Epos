buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "3.+", changing: true
    }
}

apply plugin: "net.minecraftforge.gradle"
apply plugin: "maven"
apply plugin: "java"
apply plugin: "idea"

version = "${minecraft_version}-" + getVersion()
group = "${group}"
archivesBaseName = "${archive}"

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = "forge"
        url = "http://files.minecraftforge.net/maven"
    }
}

sourceSets {
    api {
        java {
            srcDir 'src/api/java'
        }
    }
    main {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
    test {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
}

configurations {
    apiCompile.extendsFrom(compile)
}

test {
    useJUnitPlatform()
}

minecraft {
    mappings channel: "snapshot", version: "${mappings_version}"

    runs {
        client {
            workingDirectory project.file("run")
            source sourceSets.main
            source sourceSets.api
        }

        server {
            workingDirectory project.file("run")
            source sourceSets.main
            source sourceSets.api
        }
    }
}

repositories {
    maven {
        url 'https://cdn.hrzn.studio/maven/'
    }
}

dependencies {
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junit_version}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit_version}"

    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compile fg.deobf('com.hrznstudio:titanium:2.1.+')
}

task srcJar(type: Jar) {
    from sourceSets.api.allSource
    from sourceSets.main.allSource
    classifier = "sources"
}

task apiJar(type: Jar) {
    from sourceSets.api.output
    classifier = "api"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from javadoc.destinationDir
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "${title}",
                "Specification-Vendor"    : "${team}",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "${team}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

artifacts {
    archives javadocJar
    archives srcJar
    archives apiJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file://" + (System.getenv("local_maven") != null ? System.getenv("local_maven") : System.getenv("bamboo_local_maven")))
        }
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
    version = '4.9'
}

idea {
    module {
        sourceDirs = sourceDirs + sourceSets.api.allJava.srcDirs
    }
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

String getVersion() {
    String version = "${base_version}"
    String branch = project.hasProperty("branch") ? project.branch : ""

    if (branch != "") {
        version += "-" + branch

        String buildNumber = getBuildNumber()
        if (buildNumber != "") {
            version += "." + buildNumber
        }
    }

    return version
}

static String getBuildNumber() {
    String buildNumber = System.getenv("BUILD_NUMBER") != null ? System.getenv("BUILD_NUMBER") : ""
    if (buildNumber == "") {
        buildNumber = System.getenv("bamboo_buildNumber") != null ? System.getenv("bamboo_buildNumber") : ""
    }
    return buildNumber
}

configurations {
    apiCompile.extendsFrom(compile)
}
